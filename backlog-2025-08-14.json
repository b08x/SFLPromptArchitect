{
  "productBacklog": [
    {
      "epic": "System Health & Robustness",
      "issueId": "BUG-001",
      "userStory": "As a developer, I want the API to use standard HTTP status codes so that clients can handle responses correctly and predictably.",
      "taskDescription": "Refactor the `updateWorkflow` method in `backend/src/api/controllers/workflowController.ts` to return the standard HTTP status code `404 Not Found` instead of the non-standard `44` when a workflow is not found.",
      "llmAssistantPrompt": {
        "instructions": "Locate the `updateWorkflow` method in the file `backend/src/api/controllers/workflowController.ts`. Find the line where the status code is set to `44` for a 'Workflow not found' error. Change this status code to `404`. Provide the complete, corrected file content.",
        "acceptanceCriteria": [
          "The file `backend/src/api/controllers/workflowController.ts` must be modified.",
          "The `updateWorkflow` method must be present in the modified file.",
          "Within the `updateWorkflow` method, the error handling block for a missing workflow must use `res.status(404)`.",
          "The JSON response message `'Workflow not found'` must remain unchanged.",
          "The rest of the file's logic and structure must remain intact."
        ]
      }
    },
    {
      "epic": "System Health & Robustness",
      "issueId": "PERF-002",
      "userStory": "As a user, I want to partially update a workflow without losing existing data so that I can make small changes safely.",
      "taskDescription": "Refactor the `updateWorkflow` method in `backend/src/services/workflowService.ts` to ensure it performs a true partial update. The current implementation fetches the existing record but doesn't correctly merge the new data with the old, potentially overwriting existing fields with null/undefined values.",
      "llmAssistantPrompt": {
        "instructions": "In the file `backend/src/services/workflowService.ts`, modify the `updateWorkflow` method. You must first fetch the existing workflow from the database. Then, create a new object that merges the properties from the `workflowData` (the input) onto the existing workflow data. Use this merged object in the `UPDATE` SQL query to ensure that any fields not present in `workflowData` retain their original values. Provide the complete, corrected file content.",
        "acceptanceCriteria": [
          "The file `backend/src/services/workflowService.ts` must be modified.",
          "The `updateWorkflow` method must first perform a `SELECT` query to get the `existing` workflow.",
          "If the `existing` workflow is not found, the method must return `null` immediately.",
          "A new `mergedWorkflow` object must be created by combining `existing.rows[0]` with the `workflowData` parameter.",
          "The `UPDATE` query must use the properties from the `mergedWorkflow` object, not the raw `workflowData` parameter.",
          "The method must still return the updated workflow object or `null` if not found."
        ]
      }
    },
    {
      "epic": "Maintainability & Scalability",
      "issueId": "REFACTOR-001",
      "userStory": "As a developer, I want default workflows to be managed outside of the compiled code so that they can be updated without requiring a new frontend deployment.",
      "taskDescription": "Refactor the `useWorkflowManager` hook in `frontend/hooks/useWorkflowManager.ts` to load default workflows from a static JSON file instead of the hardcoded `DEFAULT_WORKFLOWS` constant.",
      "llmAssistantPrompt": {
        "instructions": "1. Create a new file `frontend/public/default-workflows.json` and move the array of workflows from `frontend/constants.ts` into this new file. 2. Modify `frontend/hooks/useWorkflowManager.ts` to use the `fetch` API in its `useEffect` hook to load the workflows from `/default-workflows.json`. 3. Remove the `DEFAULT_WORKFLOWS` import and constant from the hook. Ensure the loading state is handled correctly during the fetch.",
        "acceptanceCriteria": [
          "A new file `frontend/public/default-workflows.json` must be created containing the array of default workflow objects.",
          "The `DEFAULT_WORKFLOWS` constant must be removed from `frontend/constants.ts`.",
          "The `useWorkflowManager` hook in `frontend/hooks/useWorkflowManager.ts` must no longer import `DEFAULT_WORKFLOWS`.",
          "The `useEffect` hook inside `useWorkflowManager` must be modified to be an `async` function.",
          "Inside the `useEffect`, a `fetch('/default-workflows.json')` call must be made to load the data.",
          "The fetched default workflows and the custom workflows from localStorage must be correctly combined into the `workflows` state.",
          "The `isLoading` state must be set to `false` only after the fetch and localStorage operations are complete."
        ]
      }
    },
    {
      "epic": "System Health & Robustness",
      "issueId": "TEST-001",
      "userStory": "As a developer, I want a comprehensive test suite for the prompts API so that I can refactor with confidence and prevent regressions.",
      "taskDescription": "Create integration tests for the `prompts` API endpoints (`POST`, `GET`, `PUT`, `DELETE`). Use a testing framework like Jest and Supertest to make HTTP requests to the running application and assert the responses.",
      "llmAssistantPrompt": {
        "instructions": "Create a new test file `backend/src/api/prompts.test.ts`. Write a test suite for the `/api/prompts` routes. Include tests for: 1. `POST /api/prompts`: Creating a prompt successfully and handling validation errors. 2. `GET /api/prompts`: Retrieving all prompts. 3. `GET /api/prompts/:id`: Retrieving a single prompt and handling a 404. 4. `PUT /api/prompts/:id`: Updating a prompt successfully and handling a 404. 5. `DELETE /api/prompts/:id`: Deleting a prompt successfully and handling a 404. Use an in-memory database or mock the database service to ensure tests are isolated.",
        "acceptanceCriteria": [
          "A new test file `backend/src/api/prompts.test.ts` must be created.",
          "The test suite must use `supertest` to make requests to the Express app.",
          "The test for `POST /api/prompts` must assert a `201` status code for success and a `400` for invalid data (e.g., missing title).",
          "The test for `GET /api/prompts` must assert a `200` status code and that the response body is an array.",
          "The test for `GET /api/prompts/:id` must assert a `200` status for a valid ID and a `404` for an invalid ID.",
          "The test for `PUT /api/prompts/:id` must assert a `200` status for a successful update and a `404` for an invalid ID.",
          "The test for `DELETE /api/prompts/:id` must assert a `204` status for a successful deletion and a `404` for an invalid ID.",
          "Tests must clean up any created data after they run to ensure isolation."
        ]
      }
    },
    {
      "epic": "Security Hardening",
      "issueId": "SEC-002",
      "userStory": "As a DevOps engineer, I want the frontend container to run as a non-privileged user to minimize the potential impact of a container security breach.",
      "taskDescription": "Modify the `frontend/Dockerfile` to switch to a non-root user before starting the nginx server.",
      "llmAssistantPrompt": {
        "instructions": "In the final `nginx` stage of the `frontend/Dockerfile`, add a `USER` instruction to switch to the non-root `nginx` user before the `CMD` instruction is executed. Provide the complete, corrected Dockerfile content.",
        "acceptanceCriteria": [
          "The file `frontend/Dockerfile` must be modified.",
          "The final stage must still be based on an `nginx` image.",
          "A `USER nginx` instruction must be added.",
          "The `USER nginx` instruction must appear before the final `CMD` instruction.",
          "All other instructions (`COPY`, `EXPOSE`, `CMD`) must remain functionally the same."
        ]
      }
    }
  ]
}
