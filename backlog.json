{
  "backlog_tasks": [
    {
      "title": "Refactor Database Backup Strategy",
      "description": "The current database backup strategy relies on a `db-backup` container with an internal cron job, which is a fragile operational pattern. This task involves refactoring the backup process to use a more reliable host-level cron job that executes the provided `backup.sh` script, ensuring backups are decoupled from the application container lifecycle.",
      "system_prompt": "Refactor the database backup solution in the SFL Prompt Studio project. The current approach uses a container-based cron job in `docker-compose.yml` to run `backup.sh`. The new solution must remove the `db-backup` service from `docker-compose.yml` and provide a revised `documentation/DATABASE_BACKUP.md` file with instructions for setting up a host-level cron job to run the `backup.sh` script. Ensure the instructions are clear and detail the necessary host-level dependencies and configurations for the host cron job. The script should still use Docker commands to perform the backup but should be triggered from the host system."
    },
    {
      "title": "Secure Secrets Manager Fallback",
      "description": "The `SecretsManager` service in `backend/src/config/secrets.ts` has an insecure fallback mechanism that retrieves secrets from environment variables if the Vault connection fails. This is a critical security vulnerability in a production environment. This task is to remove this fallback and implement a fail-fast approach for production (`NODE_ENV=production`) where the application will not start if it cannot connect to and authenticate with Vault.",
      "system_prompt": "Modify the `SecretsManager` service located at `backend/src/config/secrets.ts`. Your objective is to eliminate the insecure fallback to environment variables in a production environment. The service must check the `NODE_ENV` environment variable. If `NODE_ENV` is set to 'production', the service must throw an immediate error and terminate the application startup if it fails to connect to Vault or retrieve a required secret. For other environments (e.g., 'development'), the current fallback behavior can be retained. Ensure to add comments explaining the security rationale for this change."
    },
    {
      "title": "Update OpenAPI Specification",
      "description": "The OpenAPI specification at `documentation/api/openapi.yaml` is outdated and references a `tempAuth` security scheme that is no longer in use. The new authentication system is JWT-based, as implemented in `backend/src/middleware/authMiddleware.ts`. This task is to update the OpenAPI specification to accurately reflect the current API and security model, removing the old temporary scheme and correctly documenting the JWT authentication requirements for protected endpoints.",
      "system_prompt": "Revise the OpenAPI specification file at `documentation/api/openapi.yaml`. Replace the `tempAuth` security scheme with a new JWT-based authentication scheme. For all endpoints that require authentication (e.g., `/prompts`, `/workflows`), update the `security` field to reference the new JWT scheme. Ensure the description for the security scheme and any relevant endpoint documentation is updated to reflect the use of JWT tokens. Do not change any other parts of the specification."
    },
    {
      "title": "Synchronize Documentation with Code Implementation",
      "description": "The `README.md` lists `OpenRouter` as a supported provider, but the `AIProviderFactory.ts` explicitly throws an error when it is called, stating it is not yet implemented. This creates an inconsistency between documentation and code. This task is to update the `README.md` to accurately reflect the current state of the code by either removing `OpenRouter` from the list of supported providers or explicitly marking its status as 'Planned' or 'Work in Progress'.",
      "system_prompt": "Review the `README.md` and `AIProviderFactory.ts`. Identify any discrepancies between the list of supported AI providers in the documentation and their actual implementation status in the code. Update the `README.md` to accurately reflect the current state of the `AIProviderFactory.ts` file, ensuring there is no conflicting information regarding which providers are fully supported, which are in development, and which are planned. The goal is to ensure the documentation is a single source of truth for the codebase."
    },
    {
      "title": "Improve JSON Parsing Robustness",
      "description": "The `parseJsonFromText` function in `unifiedAIService.ts` uses a series of brittle strategies to extract JSON from AI-generated text, including substring extraction between the first `{` and last `}`. This can lead to parsing errors with malformed or incomplete JSON. This task is to refactor this function to be more robust, potentially by using a dedicated, fault-tolerant JSON parsing library that can handle partial or malformed content more reliably, or by implementing a more sophisticated state-machine parser. The goal is to prevent execution failures when the AI returns non-standard JSON.",
      "system_prompt": "Analyze the `parseJsonFromText` function within `backend/src/services/unifiedAIService.ts`. The current implementation uses a series of substring-based heuristics to extract JSON content. This approach is fragile and prone to failure with non-standard AI output. Your task is to propose and implement a more robust parsing strategy. Consider using a streaming or state-based parser, or a library designed for this specific problem (e.g., `json-stream` or a similar package). The refactored function must handle edge cases gracefully, such as incomplete JSON objects or text that contains non-JSON content, and should not fail loudly."
    }
  ]
}
