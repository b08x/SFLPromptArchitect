[
  {
    "task_id": "UI-SETTINGS-5",
    "title": "Frontend: Implement Specific Settings for Ollama Models",
    "description": "Create a dedicated UI component for Ollama models, including a configurable base URL and model selection. This is critical as Ollama is a self-hosted provider and requires different configuration than cloud-based APIs.",
    "instructions": [
      "Create a new file at `frontend/components/settings/OllamaSettings.tsx`.",
      "Add a text input field for the `baseURL`, with a default value of `http://localhost:11434` or a similar local address. The UI should provide a clear label indicating this is for a local server instance.",
      "Include a dropdown or list for model selection. This list should be populated dynamically from the backend, which in turn would query the local Ollama instance for available models.",
      "Include a button to test the connection to the specified base URL.",
      "Add a status indicator (e.g., a green/red dot) to show the connection status."
    ]
  },
  {
    "task_id": "UI-SETTINGS-6",
    "title": "Frontend: Implement Token Management Settings",
    "description": "Add UI controls and indicators for token management, which are crucial for cost and performance control, especially for long contexts. This task is generic and applies to all providers.",
    "instructions": [
      "Add a `maxTokens` input field to each provider's settings component, ensuring the valid range is enforced based on the provider's capabilities.",
      "Integrate a live token counter that estimates the number of tokens in the user's prompt and conversation history. This gives the user a visual budget indicator.",
      "Display a warning or a visual indicator when the total estimated tokens exceed the model's `maxTokens` limit, which is a common reason for incomplete responses."
    ]
  },
  {
    "task_id": "UI-SETTINGS-7",
    "title": "Frontend: Implement Session-Based Caching for Settings",
    "description": "Implement a caching mechanism to store the user's selected provider, model, and parameter settings in the browser's Session Storage. This ensures settings persist for the duration of the user's session without being lost on page reloads.",
    "instructions": [
      "Create a new file, `frontend/services/sessionCacheService.ts`, to encapsulate the caching logic.",
      "Within this service, create two main functions: `saveSessionSettings(settings)` and `loadSessionSettings()`.",
      "The `saveSessionSettings` function should use `sessionStorage.setItem()` to store a JSON string of the current provider settings (provider, model, parameters) under a consistent key (e.g., `ai-settings-cache`).",
      "The `loadSessionSettings` function should use `sessionStorage.getItem()` to retrieve the stored data and parse it back into a JavaScript object. It should return `null` if no data is found.",
      "Modify the root component that manages the AI provider state to call `loadSessionSettings()` on initial load to restore the user's last configuration.",
      "Whenever the user changes a setting (provider, model, or parameters), trigger a call to `saveSessionSettings()` with the updated state to keep the cache fresh.",
      "Ensure the cache only stores non-sensitive data, such as provider preferences and settings, not API keys."
    ]
  },
  {
    "task_id": "UI-SETTINGS-8",
    "title": "Frontend: Final Integration and Testing",
    "description": "Ensure that the refactored UI correctly interacts with the backend and that all settings are applied correctly to API calls.",
    "instructions": [
      "Perform end-to-end testing to verify that selecting a provider, model, and adjusting parameters in the UI correctly sends the corresponding data to the backend.",
      "Confirm that the backend applies these parameters correctly to the Vercel AI SDK calls.",
      "Test edge cases, such as entering an invalid `thinkingBudget` value or a `maxTokens` value outside the supported range, and ensure the UI provides appropriate error messages."
    ]
  }
]
