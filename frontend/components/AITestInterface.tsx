/**\n * @file AITestInterface.tsx\n * @description Test interface component for the enhanced AI service with streaming support\n * Demonstrates integration with ProviderSwitcher and all advanced features\n * @version 1.0.0\n * @since 0.6.0\n */\n\nimport React, { useState, useCallback, useEffect, useMemo } from 'react';\nimport ProviderSwitcher from './ProviderSwitcher';\nimport { useAIStreaming, useAIGeneration } from '../hooks/useAIStreaming';\nimport { aiService, AIGenerationOptions } from '../services/aiService';\nimport { ActiveProviderConfig } from '../types/aiProvider';\nimport { AIProvider } from '../services/providerService';\nimport { getProviderConfiguration } from '../config/modelCapabilities';\nimport { PlayIcon, StopIcon, TrashIcon, ArrowPathIcon } from './icons';\n\n/**\n * Props for the AI test interface\n */\ninterface AITestInterfaceProps {\n  /** Initial provider configuration */\n  initialConfig?: ActiveProviderConfig;\n  /** Custom CSS classes */\n  className?: string;\n  /** Whether to show advanced options */\n  showAdvanced?: boolean;\n  /** Callback when test completes */\n  onTestComplete?: (result: { success: boolean; response?: string; error?: string }) => void;\n}\n\n/**\n * Test interface for AI streaming and generation\n */\nexport function AITestInterface({\n  initialConfig,\n  className = '',\n  showAdvanced = true,\n  onTestComplete\n}: AITestInterfaceProps) {\n  const [providerConfig, setProviderConfig] = useState<ActiveProviderConfig>(\n    initialConfig || {\n      provider: 'google',\n      apiKey: '',\n      model: 'gemini-2.5-flash',\n      parameters: {},\n      baseUrl: ''\n    }\n  );\n  \n  const [prompt, setPrompt] = useState('');\n  const [systemMessage, setSystemMessage] = useState('');\n  const [streamingEnabled, setStreamingEnabled] = useState(true);\n  const [customParameters, setCustomParameters] = useState<Record<string, unknown>>({});\n  const [testHistory, setTestHistory] = useState<{\n    timestamp: string;\n    prompt: string;\n    response: string;\n    provider: AIProvider;\n    model: string;\n    success: boolean;\n    duration: number;\n  }[]>([]);\n\n  // Streaming hook for real-time responses\n  const {\n    response: streamResponse,\n    isLoading: isStreaming,\n    isStreaming: showStreamingIndicator,\n    error: streamError,\n    metadata: streamMetadata,\n    generateStreaming,\n    cancel: cancelStream,\n    clear: clearStream,\n    retry: retryStream\n  } = useAIStreaming({\n    autoClear: true,\n    debounceMs: 500,\n    defaultTimeout: 60000,\n    onError: (error) => {\n      console.error('Streaming error:', error);\n    },\n    onComplete: (result) => {\n      if (result.success && result.response) {\n        addToHistory({\n          prompt,\n          response: result.response,\n          success: true,\n          duration: result.metadata?.latency || 0\n        });\n      }\n      if (onTestComplete) {\n        onTestComplete(result);\n      }\n    }\n  });\n\n  // Non-streaming hook for regular responses\n  const {\n    generate: generateRegular,\n    isLoading: isGenerating,\n    error: generateError,\n    clearError\n  } = useAIGeneration();\n\n  const [regularResponse, setRegularResponse] = useState('');\n  const [regularError, setRegularError] = useState<string | null>(null);\n\n  // Add result to history\n  const addToHistory = useCallback((result: {\n    prompt: string;\n    response: string;\n    success: boolean;\n    duration: number;\n  }) => {\n    setTestHistory(prev => [{\n      timestamp: new Date().toISOString(),\n      provider: providerConfig.provider,\n      model: providerConfig.model,\n      ...result\n    }, ...prev.slice(0, 9)]); // Keep last 10 results\n  }, [providerConfig.provider, providerConfig.model]);\n\n  // Handle provider configuration changes\n  const handleProviderChange = useCallback((config: ActiveProviderConfig) => {\n    setProviderConfig(config);\n    clearError();\n    setRegularError(null);\n  }, [clearError]);\n\n  // Prepare generation options\n  const generationOptions = useMemo((): AIGenerationOptions => {\n    return {\n      ...providerConfig.parameters,\n      ...customParameters,\n      systemMessage: systemMessage || undefined,\n      stream: streamingEnabled\n    };\n  }, [providerConfig.parameters, customParameters, systemMessage, streamingEnabled]);\n\n  // Handle test prompt execution\n  const handleTestPrompt = useCallback(async () => {\n    if (!prompt.trim()) {\n      return;\n    }\n\n    const startTime = Date.now();\n    \n    try {\n      if (streamingEnabled) {\n        await generateStreaming(\n          providerConfig.provider,\n          providerConfig.model,\n          prompt.trim(),\n          generationOptions\n        );\n      } else {\n        const response = await generateRegular(\n          providerConfig.provider,\n          providerConfig.model,\n          prompt.trim(),\n          generationOptions\n        );\n        \n        const duration = Date.now() - startTime;\n        setRegularResponse(response);\n        addToHistory({\n          prompt: prompt.trim(),\n          response,\n          success: true,\n          duration\n        });\n        \n        if (onTestComplete) {\n          onTestComplete({ success: true, response });\n        }\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      \n      if (!streamingEnabled) {\n        setRegularError(errorMessage);\n      }\n      \n      addToHistory({\n        prompt: prompt.trim(),\n        response: errorMessage,\n        success: false,\n        duration\n      });\n      \n      if (onTestComplete) {\n        onTestComplete({ success: false, error: errorMessage });\n      }\n    }\n  }, [prompt, streamingEnabled, generateStreaming, generateRegular, providerConfig, generationOptions, addToHistory, onTestComplete]);\n\n  // Handle stop generation\n  const handleStop = useCallback(() => {\n    if (streamingEnabled) {\n      cancelStream();\n    }\n  }, [streamingEnabled, cancelStream]);\n\n  // Handle clear responses\n  const handleClear = useCallback(() => {\n    if (streamingEnabled) {\n      clearStream();\n    } else {\n      setRegularResponse('');\n      setRegularError(null);\n      clearError();\n    }\n  }, [streamingEnabled, clearStream, clearError]);\n\n  // Handle retry\n  const handleRetry = useCallback(() => {\n    if (streamingEnabled) {\n      retryStream();\n    } else {\n      handleTestPrompt();\n    }\n  }, [streamingEnabled, retryStream, handleTestPrompt]);\n\n  const isLoading = streamingEnabled ? isStreaming : isGenerating;\n  const currentResponse = streamingEnabled ? streamResponse : regularResponse;\n  const currentError = streamingEnabled ? streamError : (regularError || generateError);\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Provider Switcher */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n          AI Provider Configuration\n        </h3>\n        <ProviderSwitcher\n          currentConfig={providerConfig}\n          onConfigChange={handleProviderChange}\n          compact={false}\n        />\n      </div>\n\n      {/* Test Configuration */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n          Test Configuration\n        </h3>\n        \n        <div className=\"space-y-4\">\n          {/* Prompt Input */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Test Prompt\n            </label>\n            <textarea\n              value={prompt}\n              onChange={(e) => setPrompt(e.target.value)}\n              placeholder=\"Enter your test prompt here...\"\n              className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              rows={3}\n              disabled={isLoading}\n            />\n          </div>\n\n          {/* System Message */}\n          {showAdvanced && (\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                System Message (Optional)\n              </label>\n              <textarea\n                value={systemMessage}\n                onChange={(e) => setSystemMessage(e.target.value)}\n                placeholder=\"Enter system instructions...\"\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                rows={2}\n                disabled={isLoading}\n              />\n            </div>\n          )}\n\n          {/* Streaming Toggle */}\n          <div className=\"flex items-center space-x-3\">\n            <input\n              type=\"checkbox\"\n              id=\"streaming-enabled\"\n              checked={streamingEnabled}\n              onChange={(e) => setStreamingEnabled(e.target.checked)}\n              disabled={isLoading}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n            <label htmlFor=\"streaming-enabled\" className=\"text-sm font-medium text-gray-700\">\n              Enable Streaming Response\n            </label>\n          </div>\n        </div>\n      </div>\n\n      {/* Test Controls */}\n      <div className=\"flex items-center space-x-3\">\n        <button\n          onClick={handleTestPrompt}\n          disabled={!prompt.trim() || isLoading}\n          className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n        >\n          <PlayIcon className=\"h-4 w-4\" />\n          <span>{isLoading ? 'Generating...' : 'Test Prompt'}</span>\n        </button>\n        \n        {isLoading && (\n          <button\n            onClick={handleStop}\n            className=\"flex items-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n          >\n            <StopIcon className=\"h-4 w-4\" />\n            <span>Stop</span>\n          </button>\n        )}\n        \n        <button\n          onClick={handleClear}\n          disabled={!currentResponse && !currentError}\n          className=\"flex items-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n        >\n          <TrashIcon className=\"h-4 w-4\" />\n          <span>Clear</span>\n        </button>\n        \n        {(currentError || currentResponse) && (\n          <button\n            onClick={handleRetry}\n            disabled={isLoading}\n            className=\"flex items-center space-x-2 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            <ArrowPathIcon className=\"h-4 w-4\" />\n            <span>Retry</span>\n          </button>\n        )}\n      </div>\n\n      {/* Response Display */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            Response\n          </h3>\n          {showStreamingIndicator && (\n            <div className=\"flex items-center space-x-2 text-blue-600\">\n              <div className=\"animate-pulse h-2 w-2 bg-blue-600 rounded-full\"></div>\n              <span className=\"text-sm font-medium\">Streaming...</span>\n            </div>\n          )}\n        </div>\n        \n        {currentError ? (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-2 text-red-800\">\n              <svg className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n              </svg>\n              <span className=\"font-semibold\">Error</span>\n            </div>\n            <p className=\"mt-2 text-red-700\">{currentError}</p>\n          </div>\n        ) : currentResponse ? (\n          <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n            <pre className=\"whitespace-pre-wrap text-sm text-gray-800 font-mono\">\n              {currentResponse}\n            </pre>\n            \n            {/* Metadata */}\n            {streamMetadata && (\n              <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                <div className=\"text-xs text-gray-500 space-y-1\">\n                  <div>Provider: {streamMetadata.provider}</div>\n                  <div>Model: {streamMetadata.model}</div>\n                  {streamMetadata.latency && (\n                    <div>Latency: {streamMetadata.latency}ms</div>\n                  )}\n                  {streamMetadata.tokensUsed && (\n                    <div>Tokens: {streamMetadata.tokensUsed}</div>\n                  )}\n                  {streamMetadata.cost && (\n                    <div>Cost: ${streamMetadata.cost.toFixed(4)}</div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-8 text-center text-gray-500\">\n            No response yet. Enter a prompt and click \"Test Prompt\" to begin.\n          </div>\n        )}\n      </div>\n\n      {/* Test History */}\n      {testHistory.length > 0 && (\n        <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Recent Tests\n          </h3>\n          \n          <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n            {testHistory.map((test, index) => (\n              <div\n                key={`${test.timestamp}-${index}`}\n                className={`p-3 rounded border ${\n                  test.success\n                    ? 'bg-green-50 border-green-200'\n                    : 'bg-red-50 border-red-200'\n                }`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"text-xs text-gray-500\">\n                    {new Date(test.timestamp).toLocaleString()}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    {test.provider} • {test.model} • {test.duration}ms\n                  </div>\n                </div>\n                \n                <div className=\"text-sm\">\n                  <div className=\"font-semibold text-gray-700 mb-1\">\n                    {test.prompt.length > 100 \n                      ? `${test.prompt.substring(0, 100)}...` \n                      : test.prompt\n                    }\n                  </div>\n                  <div className={test.success ? 'text-green-800' : 'text-red-800'}>\n                    {test.response.length > 200 \n                      ? `${test.response.substring(0, 200)}...` \n                      : test.response\n                    }\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AITestInterface;