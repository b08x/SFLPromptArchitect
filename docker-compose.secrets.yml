# Docker Compose configuration with HashiCorp Vault integration
# This extends the base docker-compose.yml with secure secrets management
#
# Usage:
#   # Development (with fallback to .env)
#   docker-compose -f docker-compose.yml -f docker-compose.secrets.yml up
#   
#   # Production (Vault required)
#   export NODE_ENV=production
#   docker-compose -f docker-compose.yml -f docker-compose.secrets.yml up

version: '3.8'

services:
  # HashiCorp Vault for secrets management
  vault:
    image: hashicorp/vault:1.17
    container_name: sfl-vault
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_DEV_ROOT_TOKEN:-dev-root-token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    ports:
      - "8200:8200"
    networks:
      - sfl-network
    volumes:
      - vault-data:/vault/data
      - vault-logs:/vault/logs
      - ./vault-config:/vault/config
    command: vault server -dev
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8200/v1/sys/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Vault initialization service
  vault-init:
    image: hashicorp/vault:1.17
    container_name: sfl-vault-init
    depends_on:
      vault:
        condition: service_healthy
    networks:
      - sfl-network
    volumes:
      - ./scripts/vault-init.sh:/vault-init.sh
      - vault-config:/vault/config
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_DEV_ROOT_TOKEN:-dev-root-token}
    command: sh /vault-init.sh
    restart: "no"

  # Updated backend service with Vault integration
  backend:
    environment:
      # Vault configuration
      - VAULT_ADDR=http://vault:8200
      - VAULT_ROLE_ID=${VAULT_ROLE_ID}
      - VAULT_SECRET_ID=${VAULT_SECRET_ID}
      - VAULT_MOUNT_PATH=secret
      - VAULT_TIMEOUT=5000
      - VAULT_TLS_VERIFY=false
      # Keep DATABASE_URL and REDIS_URL for database connections
      # (these will be migrated to Vault in production)
      - DATABASE_URL=postgres://user:password@db:5432/sfl_db
      - REDIS_URL=redis://cache:6379
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - vault-init
      - migration
      - cache
    # Remove env_file directive to prevent conflicts
    # env_file directive will be overridden by explicit environment variables

  # Vault backup service for data persistence
  vault-backup:
    image: hashicorp/vault:1.17
    container_name: sfl-vault-backup
    depends_on:
      - vault
    networks:
      - sfl-network
    volumes:
      - vault-backups:/backups
      - ./scripts/vault-backup.sh:/vault-backup.sh
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_DEV_ROOT_TOKEN:-dev-root-token}
    command: sh -c "while true; do sh /vault-backup.sh; sleep 3600; done"
    restart: unless-stopped
    profiles: ["backup"]

volumes:
  vault-data:
    driver: local
  vault-logs:
    driver: local
  vault-config:
    driver: local
  vault-backups:
    driver: local

networks:
  sfl-network:
    external: true